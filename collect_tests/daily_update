#! /usr/bin/env bash

# Run in: ~/testing/ to update several dir. which are used for:
# - front_page building
# - processing testing emails (-> testing page, part of front_page building)
# - making a daily tar file of source code

tmpFil="/tmp/"`basename $0`".$$"
#- which GitHub repository to use and how to access it:
  git_repo='MITgcm';  git_test='regression_tests'
 #git_repo='altMITgcm'; #git_test='MITgcm66h'
  test_branch='master'
  test_branch='get_tst_scripts_from_git'
#--
  git_other='website_legacy'
  other_branch='master'
#--
  git_repo="https://github.com/$git_repo"
 #git_repo="git://github.com/$git_repo"
 #git_repo="git@github.com:$git_repo"

#-- created empty dirs here if not already there:
listD='MITgcm-test logs prc_msg_dir postponed fail2process'
for dd in $listD ; do
  if test ! -d $dd ; then
    if test -e $dd ; then /bin/rm -rf $dd ; fi
    mkdir $dd
    retVal=$?
    if test $retVal != 0 ; then
       echo " Error: 'mkdir $dd' returned: $retVal"
       exit 1
    fi
  fi
done

#---+----1----+----2----+----3----+----4----+----5----+----6----+----7-|--+----|
# #- update scripts dir:
# if test -d scripts ; then
#  echo -n 'Update dir: '
#  ( cd scripts && pwd && cvs -q update -P -d )
# fi
#- update clone $git_test :
checkOut=1
if [ $checkOut -eq 1 ] ; then
  if test ! -e $git_test/.git/config ; then
    echo "no file: $git_test/.git/config => try a new clone"
    checkOut=2
  fi
fi
if [ $checkOut -eq 2 ] ; then
  if test -e $git_test ; then
    echo -n " removing dir: $git_test ..."
    rm -rf $git_test
    echo "  done"
  fi
  echo -n "Make a clone of $git_test from repo: $git_repo ... "
  git clone $git_repo/${git_test}.git 2> $tmpFil
  retVal=$?
  if test $retVal = 0 ; then
     echo ' --> done!'
     rm -f $tmpFil
  else echo ''
     echo " Error: 'git clone' returned: $retVal"
     cat $tmpFil ; rm -f $tmpFil
     exit 2
  fi
fi
if [ $checkOut -eq 1 ] ; then
  loc_branch=`(cd $git_test ; git rev-parse --abbrev-ref HEAD 2> /dev/null )`
  if test $test_branch != $loc_branch ; then
    echo "In clone ( $git_test ), switching from '$loc_branch' to '$test_branch' :"
    ( cd $git_test ; git fetch )
    echo "  and checkout $test_branch :"
    ( cd $git_test ; git checkout $test_branch )
  fi
  echo -n "Updating current clone ( $git_test ) ... "
  #echo '' >> $LOG_FIL
  ( cd $git_test ; git pull )
  retVal=$?
  if test "x$retVal" != x0 ; then echo ''
       echo "'git pull' on '"`hostname`"' fail (return val=$retVal) => exit"
       exit 3
  else echo "  done"
    #-  checkout for missing files:
    ( cd $git_test ; git checkout -- . ) > /dev/null 2>&1
  fi
fi

#-- symbolic-link as short-cut
if test ! -e bin_sh/daily_update ; then
  if test -d $git_test/collect_tests ; then
    echo "  link '$git_test/collect_tests' to 'bin_sh'"
    ln -s $git_test/collect_tests bin_sh
  fi
fi
#-----

# #- update ref_machine testing scripts:
# if test -d ref_machine ; then
#  echo -n 'Update dir: '
#  ( cd ref_machine && pwd && cvs -q update -P -d )
# fi

#-- update tools/mpack-1.6 dir:
# if test -d tools_mpack ; then
#  echo -n 'Update dir: '
#  tmpFil=/tmp/TTT.daily_snapshot.$$
#  exe=munpack
#  ( cd tools_mpack ; pwd
#    chg=`cvs -q update -P -d | tee $tmpFil | sed '/^?/d' | wc -l`
#   #echo "chg ='$chg'"
#    cat $tmpFil ; rm -f $tmpFil
#    if test "x$chg" != x0 ; then
#      if test -f $exe ; then echo " removing: $exe force re-build." ; fi
#      rm -f $exe
#    fi
#  )
# fi

#---+----1----+----2----+----3----+----4----+----5----+----6----+----7-|--+----|
# #- update front-page building dir:
# if test -d front_content ; then
#  echo -n 'Update dir: '
#  ( cd front_content && pwd && cvs -q update -P -d )
# fi
#- update clone $git_other :
checkOut=1
if [ $checkOut -eq 1 ] ; then
  if test ! -e $git_other/.git/config ; then
    echo "no file: $git_other/.git/config => try a new clone"
    checkOut=2
  fi
fi
if [ $checkOut -eq 2 ] ; then
  if test -e $git_other ; then
    echo -n " removing dir: $git_other ..."
    rm -rf $git_other
    echo "  done"
  fi
  echo -n "Make a clone of $git_other from repo: $git_repo ... "
  git clone $git_repo/${git_other}.git 2> $tmpFil
  retVal=$?
  if test $retVal = 0 ; then
     echo ' --> done!'
     rm -f $tmpFil
  else echo ''
     echo " Error: 'git clone' returned: $retVal"
     cat $tmpFil ; rm -f $tmpFil
     exit 4
  fi
fi
if [ $checkOut -eq 1 ] ; then
  loc_branch=`(cd $git_other ; git rev-parse --abbrev-ref HEAD 2> /dev/null )`
  if test $other_branch != $loc_branch ; then
    echo "In clone ( $git_other ), switching from '$loc_branch' to '$other_branch' :"
    ( cd $git_other ; git fetch )
    echo "  and checkout $other_branch :"
    ( cd $git_other ; git checkout $other_branch )
  fi
  echo -n "Updating current clone ( $git_other ) ... "
  #echo '' >> $LOG_FIL
  ( cd $git_other ; git pull )
  retVal=$?
  if test "x$retVal" != x0 ; then echo ''
       echo "'git pull' on '"`hostname`"' fail (return val=$retVal) => exit"
       exit 5
  else echo "  done"
    #-  checkout for missing files:
    ( cd $git_other ; git checkout -- . ) > /dev/null 2>&1
  fi
fi

#---+----1----+----2----+----3----+----4----+----5----+----6----+----7-|--+----|
#-- clean-up old log files:
cd logs
n=$(( `ls bld_manual.* 2>/dev/null | wc -l` - 10 ))
if test $n -gt 0 ; then
  echo -n ' remove files: '
    ls -lt bld_manual.* | tail -"$n"
    ls -t  bld_manual.* | tail -"$n" | xargs rm -f
fi
p=`ls check_outp_*.txt_bak 2>/dev/null | wc -l`
n=$(( `ls check_outp_*.txt 2>/dev/null | wc -l` - 15 ))
if test $p -gt 0 -o $n -gt 0 ; then echo -n ' remove files: ' ; fi
if test $p -gt 0 ; then
  ls    check_outp_*.txt_bak
  rm -f check_outp_*.txt_bak
fi
if test $n -gt 0 ; then
    ls -lt check_outp_*.txt | tail -"$n"
    ls -t  check_outp_*.txt | tail -"$n" | xargs rm -f
fi
