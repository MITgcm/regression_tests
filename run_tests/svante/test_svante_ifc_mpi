#!/bin/bash
#SBATCH -J ifcMPI_tst
#SBATCH -p fdr
#SBATCH -t 23:30:00
#SBATCH --mem-per-cpu 4000
#SBATCH -N 1
#SBATCH --tasks-per-node 6
#SBATCH -x curly,larry,moe,shemp
#SBATCH -e /home/jm_c/test_svante/output/ifcMPI_tst.stderr
#SBATCH -o /home/jm_c/test_svante/output/ifcMPI_tst.stdout
#SBATCH --no-requeue

# $Header: /u/gcmpack/MITgcm_contrib/test_scripts/svante/test_svante_ifc_mpi,v 1.14 2018/03/23 13:58:23 jmc Exp $
# $Name:  $

if test -f /etc/profile.d/modules.sh    ; then . /etc/profile.d/modules.sh    ; fi
if test -f /etc/profile.d/zz_modules.sh ; then . /etc/profile.d/zz_modules.sh ; fi
# Note: added "ulimit -s unlimited" in file "~/.bashrc"
# to pass big test (the 2 fizhi-cs-* test & adjoint tests) with MPI

umask 0022
#- to get case insensitive "ls" (and order of tested experiments)
export LC_ALL="en_US.UTF-8"
echo " running on: "`hostname`
headNode='svante-login'

dNam='svante'
HERE="$HOME/test_${dNam}"
OUTP="$HERE/output"; SavD="$HERE/send"
SEND="ssh $headNode $SavD/mpack"
#TST_DISK="/net/fs09/d1/jm_c"
TST_DISK="/scratch/jm_c"
TST_DIR="$TST_DISK/test_${dNam}"
#- where local copy of code is (need to be consistent with "test_submit_svante"):
#srcDIR='.'
srcDIR=$HERE
srcCode="MITgcm_today"

echo "cd $TST_DISK ; pwd (x2)"
cd $TST_DISK
pwd
if test ! -d $TST_DIR ; then
   echo -n "Creating a working dir: $TST_DIR ..."
  #/bin/rm -rf $TST_DIR
   mkdir $TST_DIR
   retVal=$?
   if test "x$retVal" != x0 ; then
      echo "Error: unable to make dir: $TST_DIR (err=$retVal ) --> Exit"
      exit 1
   fi
fi
echo "start from TST_DIR='$TST_DIR' at: "`date`
cd $TST_DIR
pwd

typ='' ; addExp='' ; skipExp=''
sfx='ifcMPI'
 module add intel/2017.0.1
 module add openmpi
#module add netcdf
 OPTFILE="../tools/build_options/linux_amd64_ifort11"
 export GENERIC='on' # <-- to prevent the use of "-xHost" option
#- needed for DIVA with MPI:
#export MPI_INC_DIR=$INC_MPI
 options="$typ -MPI 6"
#options="-j 2 $options"
#- need this to get "staf":
#export PATH="$PATH:$HOME/bin"

dAlt=`date +%d` ; dAlt=`expr $dAlt % 3`
#if [ $dAlt -eq 1 ] ; then options="$options -fast"
#else options="$options -devel" ; fi

checkOut=2 ; #options="$options -do"
#options="$options -nc" ; checkOut=1
#options="$options -q"  ; checkOut=0

NSLOTS=$SLURM_NTASKS
THEDATE=`date`
echo '********************************************************************************'
echo 'Start job '$THEDATE
echo 'NSLOTS = '$NSLOTS
echo '======= NODELIST ==============================================================='
echo $SLURM_NODELIST
cat /etc/redhat-release
echo '======= env ===================================================================='
env | grep SLURM
echo '======= modules ================================================================'
module list 2>&1
echo '================================================================================'

cmdCVS='cvs -d :pserver:cvsanon@mitgcm.org:/u/gcmpack -q'
gcmDIR="MITgcm_$sfx"
#- check for disk space: relative space (99%) or absolute (10.G):
dsp=`df -P . | tail -1 | awk '{print $5}' | sed 's/%$//'`
if [ $dsp -gt 99 ] ; then
#dsp=`df -P . | tail -1 | awk '{print $4}'`
#if [ $dsp -le 100000000 ] ; then
  echo 'Not enough space on this disk => do not run testreport.'
  df .
  exit
fi
if [ $checkOut -eq 1 ] ; then
  if test -d $gcmDIR/CVS ; then
    echo "cleaning output from $gcmDIR/verification :"
#- remove previous output tar files and tar & remove previous output-dir
    /bin/rm -f $gcmDIR/verification/??_${dNam}-${sfx}_????????_?.tar.gz
    ( cd $gcmDIR/verification
      listD=`ls -1 -d ??_${dNam}-${sfx}_????????_? 2> /dev/null`
      for dd in $listD
      do
        if test -d $dd ; then
          tar -cf ${dd}".tar" $dd > /dev/null 2>&1 && gzip ${dd}".tar" && /bin/rm -rf $dd
          retVal=$?
          if test "x$retVal" != x0 ; then
             echo "ERROR in tar+gzip prev outp-dir: $dd"
             echo " on '"`hostname`"' (return val=$retVal) but continue"
          fi
        fi
      done )
    ( cd $gcmDIR/verification ; ../tools/do_tst_2+2 -clean )
    ( cd $gcmDIR/verification ; ./testreport $typ -clean )
    echo "cvs update of dir $gcmDIR :"
    ( cd $gcmDIR ; $cmdCVS update -P -d ) 2>&1
    retVal=$?
    if test "x$retVal" != x0 ; then
       echo "cvs update on '"`hostname`"' fail (return val=$retVal) => exit"
       exit
    fi
  else
    echo "no dir: $gcmDIR/CVS => try a fresh check-out"
    checkOut=2
  fi
fi
if [ $checkOut -eq 2 ] ; then
  if test -e $gcmDIR ; then
    echo -n "Removing working copy: $gcmDIR ..."
    rm -rf $gcmDIR
    echo "  done"
  fi
# make a local copy (instead of using CVS):
  today=`date +%Y%m%d`
  nCount=0; updFile="${srcDIR}/updated_code"
  updDate=0 ; test -f $updFile && updDate=`cat $updFile`
  while [ $today -gt $updDate ] ; do
   nCount=`expr $nCount + 1`
   if [ $nCount -gt 40 ] ; then
     echo " waiting too long (nCount=$nCount) for updated code"
     echo " today=$today , updDate=$updDate "
     ls -l $updFile
     exit
   fi
   sleep 60
   updDate=0 ; test -f $updFile && updDate=`cat $updFile`
  done
  ls -l $updFile
  echo " waited nCount=$nCount for updated code ($updDate) to copy"
  if test -d $srcDIR/$srcCode ; then
    echo -n "Make local copy of dir '$srcDIR/$srcCode' to: $gcmDIR ..."
    cp -pra $srcDIR/$srcCode $gcmDIR
    echo "  done"
  else echo " dir: $srcDIR/$srcCode missing => exit" ; exit ; fi
fi

#- change dir to $gcmDIR/verification dir:
if test -e $gcmDIR/verification ; then
  if [ $checkOut -lt 2 ] ; then
    echo " dir $gcmDIR/verification exist" ; fi
  cd $gcmDIR/verification
else
  echo "no dir: $gcmDIR/verification => exit"
  exit
fi

if [ $dAlt -eq 1 ] ; then
  options="$options -fast"
  echo ''
  #- 1) just compile ("-nr"), using "-j 2" to speed up
  echo ./testreport $options -of $OPTFILE -skd \'$skipExp\' \
    -j 4 -nr -odir ${dNam}-$sfx
  ./testreport $options -of $OPTFILE -skd "$skipExp" \
    -j 4 -nr -odir ${dNam}-$sfx
  nFc=`grep -c '^Y . N N ' tr_out.txt`
  echo " <= fail to compile $nFc experiments"
else
  options="$options -devel"
  echo ''
  #- 0) just make all module header ( *__genmod.mod files) using modified Makefile
  echo ./testreport $options -of $OPTFILE -skd \'$skipExp\' \
    -j 4 -repl_mk do_make_syntax.sh -obj -dd
  ./testreport $options -of $OPTFILE -skd "$skipExp" \
    -j 4 -repl_mk do_make_syntax.sh -obj -dd 2>&1
  echo ''
  #- 1) just compile ("-nr"), using "-j 2" to speed up
  echo ./testreport $options -of $OPTFILE -skd \'$skipExp\' \
    -j 4 -nr -q -odir ${dNam}-$sfx
  ./testreport $options -of $OPTFILE -skd "$skipExp" \
    -j 4 -nr -q -odir ${dNam}-$sfx
  nFc=`grep -c '^Y . N N ' tr_out.txt`
  echo " <= fail to compile $nFc experiments"
fi
  echo ''
  #- 2) run and report results ; also finish to compile those who failed with "-j"
  echo ./testreport $options -of $OPTFILE -skd \'$skipExp\' \
    -q -odir ${dNam}-$sfx -send \'$SEND\' -sd $SavD -a jm_c@mitgcm.org
  ./testreport $options -of $OPTFILE -skd "$skipExp" \
    -q -odir ${dNam}-$sfx -send "$SEND" -sd $SavD -a jm_c@mitgcm.org
  echo ''
  #- 3) test restart and report results
  echo ../tools/do_tst_2+2 -mpi \
    -o ${dNam}-$sfx -send \'$SEND\' -sd $SavD -a jm_c@mitgcm.org
  ../tools/do_tst_2+2 -mpi \
    -o ${dNam}-$sfx -send "$SEND" -sd $SavD -a jm_c@mitgcm.org

