#!/bin/bash
#SBATCH -J gfoTlm_tst
#SBATCH -p sched_mit_hill
#SBATCH --mem-per-cpu 4000
#SBATCH -n 6
#SBATCH -N 2
#SBATCH -x node[016,030,031,073,125,198,332]
#SBATCH -e /home/jm_c/test_engaging/output/gfoTlm_tst.stderr
#SBATCH -o /home/jm_c/test_engaging/output/gfoTlm_tst.stdout
#SBATCH --no-requeue --constraint=centos6

# $Header: /u/gcmpack/MITgcm_contrib/test_scripts/engaging/test_engag_gfo_tlm,v 1.13 2018/04/03 00:27:06 jmc Exp $
# $Name:  $

if test -f /etc/profile.d/modules.sh ; then
    . /etc/profile.d/modules.sh
fi
# Note: added "ulimit -s unlimited" in file "~/.bashrc"
# to pass big test (the 2 fizhi-cs-* test & adjoint tests) with MPI

umask 0022
#- to get case insensitive "ls" (and order of tested experiments)
export LC_ALL="en_US.UTF-8"
echo " running on: "`hostname`

dNam='engaging'
HERE="$HOME/test_$dNam"
OUTP="$HERE/output"; SavD="$HERE/send"
SEND="ssh eofe4 $SavD/mpack"
TST_DIR="/pool001/jm_c/test_$dNam"
tmpFil="/tmp/"`basename $0`".$$"
  cmdCVS='cvs -d :pserver:cvsanon@mitgcm.org:/u/gcmpack -q'
#- which GitHub repository to use and how to access it:
  git_repo='MITgcm';  git_code='MITgcm'
 #git_repo='altMITgcm'; #git_code='MITgcm66h'
#--
  git_repo="https://github.com/$git_repo"
 #git_repo="git://github.com/$git_repo"
 #git_repo="git@github.com:$git_repo"

typ='' ; addExp='' ; skipExp=''
sfx='gfoTlm'; typ='-tlm'
 module add slurm
 module add gcc
 module add mvapich2/gcc/64/2.0b
#module add openmpi/gcc
 export MPI_INC_DIR="$MPI_HOME/include"
#- for NetCDF:
 module add harvard/centos6/hdf5-1.8.11_gcc-4.4.7
 module add harvard/centos6/netcdf-4.3.0_gcc-4.4.7
 OPTFILE="../tools/build_options/linux_amd64_gfortran"
 options="$typ -MPI 6"
 ulimit -s unlimited
#- need this to get "staf":
export PATH="$PATH:$HOME/bin"

gcmDIR="MITgcm_$sfx"
dAlt=`date +%d` ; dAlt=`expr $dAlt % 3`
if [ $dAlt -eq 1 ] ; then options="$options -fast"
else options="$options -devel" ; fi

checkOut=1 ; #options="$options -do"
#options="$options -nc" ; checkOut=1
#options="$options -q"  ; checkOut=0

if test -d $TST_DIR ; then
  echo "start from TST_DIR='$TST_DIR' at: "`date`
else
 #if test ! -d $TST_DIR ; then mkdir $TST_DIR ; fi
 #if test ! -d $TST_DIR ; then
 #  echo "ERROR: Can't create directory \"$TST_DIR\""
 #  exit 1
 #fi
 #echo "start in new dir TST_DIR='$TST_DIR' at: "`date`
  echo "ERROR: missing directory \"$TST_DIR\""
  exit 1
fi
cd $TST_DIR
pwd

NSLOTS=$SLURM_NTASKS
THEDATE=`date`
echo '********************************************************************************'
echo 'Start job '$THEDATE
echo 'NSLOTS = '$NSLOTS
echo '======= NODELIST ==============================================================='
echo $SLURM_NODELIST
cat /etc/redhat-release
echo '======= env ===================================================================='
env | grep SLURM
echo '======= modules ================================================================'
module list 2>&1
echo '================================================================================'

#- keep a copy of MPI_MFILE:
#cp -p $PBS_NODEFILE $OUTP"/mf_"$sfx

#- check for disk space: relative space (99%) or absolute (10.G):
dsp=`df -P . | tail -1 | awk '{print $5}' | sed 's/%$//'`
if [ $dsp -gt 99 ] ; then
#dsp=`df -P . | tail -1 | awk '{print $4}'`
#if [ $dsp -le 100000000 ] ; then
  echo 'Not enough space on this disk => do not run testreport.'
  df .
  exit
fi
if [ $checkOut -eq 1 ] ; then
  if test -e $gcmDIR/.git/config ; then
    echo "cleaning output from $gcmDIR/verification :"
#- remove previous output tar files and tar & remove previous output-dir
    /bin/rm -f $gcmDIR/verification/??_${dNam}-${sfx}_????????_?.tar.gz
    ( cd $gcmDIR/verification
      listD=`ls -1 -d ??_${dNam}-${sfx}_????????_? 2> /dev/null`
      for dd in $listD
      do
        if test -d $dd ; then
          tar -cf ${dd}".tar" $dd > /dev/null 2>&1 && gzip ${dd}".tar" && /bin/rm -rf $dd
          retVal=$?
          if test "x$retVal" != x0 ; then
             echo "ERROR in tar+gzip prev outp-dir: $dd"
             echo " on '"`hostname`"' (return val=$retVal) but continue"
          fi
        fi
      done )
#   ( cd $gcmDIR/verification ; ../tools/do_tst_2+2 -clean )
    ( cd $gcmDIR/verification ; ./testreport $typ -clean )
    echo "Update MITgcm code in dir $gcmDIR :"
    ( cd $gcmDIR ; git pull ) 2>&1
    retVal=$?
    if test "x$retVal" != x0 ; then
       echo "git pull on '"`hostname`"' fail (return val=$retVal) => exit"
       exit
    fi
    echo "  and checkout master:"
    ( cd $gcmDIR ; git checkout master -- . ) 2>&1
  else
    echo "no file: $gcmDIR/.git/config => try to download a fresh clone"
    checkOut=2
  fi
fi
if [ $checkOut -eq 2 ] ; then
  if test -e $gcmDIR ; then
    echo -n "Removing working copy: $gcmDIR ..."
    rm -rf $gcmDIR
    echo "  done"
  fi
  echo -n "Make a clone of $git_code from repo: $git_repo ..."
  git clone $git_repo/${git_code}.git $gcmDIR 2> $tmpFil
  retVal=$?
  if test $retVal = 0 ; then
      echo '  done' ; rm -f $tmpFil
  else
      echo " Error: 'git clone' returned: $retVal"
      cat $tmpFil ; rm -f $tmpFil
      exit
  fi
  if test -d $gcmDIR/verification ; then
    /usr/bin/find $gcmDIR -type d | xargs chmod g+rxs
    /usr/bin/find $gcmDIR -type f | xargs chmod g+r
  fi
fi

# -change dir to $gcmDIR/verification dir + add additional experiments:
if test -e $gcmDIR/verification ; then
  if [ $checkOut -lt 2 ] ; then
    echo " dir $gcmDIR/verification exist" ; fi
  cd $gcmDIR/verification
  for exp2add in $addExp ; do
    if test -d ${exp2add}/CVS ; then
      echo "  update dir: $exp2add (from Contrib:verification_other)"
      ( cd $exp2add ; $cmdCVS update -P -d ) 2>&1
      retVal=$?
      if test "x$retVal" != x0 ; then
        echo "cvs update on '"`hostname`"' fail (return val=$retVal)"
       #exit
      fi
    else
      test -r $exp2add && /bin/rm -rf $exp2add
      echo " add dir: $exp2add (from Contrib:verification_other)"
      ( $cmdCVS co -P -d $exp2add \
                     MITgcm_contrib/verification_other/$exp2add > /dev/null )
      /usr/bin/find $exp2add -type d | xargs chmod g+rxs
      /usr/bin/find $exp2add -type f | xargs chmod g+r
    fi
  done
else
  echo "no dir: $gcmDIR/verification => exit"
  exit
fi

  echo ''
  echo ./testreport $options -of $OPTFILE \
    -odir ${dNam}-$sfx -send \'$SEND\' -sd $SavD -a jm_c@mitgcm.org
  ./testreport $options -of $OPTFILE \
    -odir ${dNam}-$sfx -send "$SEND" -sd $SavD -a jm_c@mitgcm.org

# echo ''
# echo ../tools/do_tst_2+2 -mpi \
#   -o ${dNam}-$sfx -send \'$SEND\' -sd $SavD -a jm_c@mitgcm.org
# ../tools/do_tst_2+2 -mpi \
#   -o ${dNam}-$sfx -send "$SEND" -sd $SavD -a jm_c@mitgcm.org

