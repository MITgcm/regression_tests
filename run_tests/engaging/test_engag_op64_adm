#!/bin/bash
#SBATCH -J o64Adm_tst
#SBATCH -p sched_mit_hill
#SBATCH -t 06:00:00
#SBATCH --mem-per-cpu 4000
#SBATCH -N 2
#SBATCH --tasks-per-node 3
# #SBATCH -n 6
# #SBATCH -x node[073,122,124,235,335]
#SBATCH -x node[173,235,335]
#SBATCH -e /home/jm_c/test_engaging/output/o64Adm_tst.stderr
#SBATCH -o /home/jm_c/test_engaging/output/o64Adm_tst.stdout
#SBATCH --no-requeue

if test -f /etc/profile.d/modules.sh ; then . /etc/profile.d/modules.sh ; fi
# Note: added "ulimit -s unlimited" in file "~/.bashrc"
# to pass big test (the 2 fizhi-cs-* test & adjoint tests) with MPI

umask 0022
#- to get case insensitive "ls" (and order of tested experiments)
export LC_ALL="en_US.UTF-8"
echo " running on: "`hostname`
headNode='vlogin003'

dNam='engaging'
HERE="$HOME/test_${dNam}"
OUTP="$HERE/output"; SavD="$HERE/send"
SEND="ssh $headNode $SavD/mpack"
TST_DIR="/pool001/jm_c/test_$dNam"
tmpFil="/tmp/"`basename $0`".$$"
  cmdCVS='cvs -d :pserver:cvsanon@mitgcm.org:/u/gcmpack -q'
#- which GitHub repository to use and how to access it:
  git_repo='MITgcm'; git_code='MITgcm' ; git_other='verification_other'
 #git_repo='altMITgcm'; #git_code='MITgcm66h'
#--
  git_repo="https://github.com/$git_repo"
 #git_repo="git://github.com/$git_repo"
 #git_repo="git@github.com:$git_repo"

TR_Script='./testreport' ; RS_Script='../tools/do_tst_2+2'
checkOut=1 ; dblTr=0 ; typ='' ; addExp='' ; fewExp='' ; optExp='-skd'
sfx='o64Adm'; typ='-adm' ; dblTr=1
#- currently, no NetCDF => no pkg/profiles
fewExp="$fewExp global_oce_biogeo_bling"
 module add open64
 module add mvapich2/open64/64/2.0b
 export MPI_INC_DIR="$MPI_HOME/include"
 OPTFILE="../tools/build_options/linux_amd64_open64"
#options="-j 2 -devel -gsl"
 options="$typ -MPI 6"
#export OMP_NUM_THREADS=2
#export OMP_SLAVE_STACK_SIZE=400m
#export GSL_IEEE_MODE=double-precision,mask-underflow,mask-denormalized
 ulimit -s unlimited
#- need this to get "staf":
 export PATH="$PATH:$HOME/bin"

gcmDIR="MITgcm_$sfx"
dAlt=`date +%d` ; dAlt=`expr $dAlt % 3`
if [ $dAlt -eq 1 ] ; then options="$options -fast"
else options="$options -devel" ; fi

#options="$options -do"
#options="$options -nc" ; checkOut=1
#options="$options -q"  ; checkOut=0 ; dblTr=0
# dblTr=-1 #- skip testreport completely (only run "do_tst_2+2")
# optExp='-t' ; fewExp='global_ocean.cs32x15 lab_sea'

#- to use a local version:
# TR_Script="$HERE/local/testreport"
# RS_Script="$HERE/local/do_tst_2+2"

if test "x$fewExp" != x ; then fewExp=`echo $fewExp | sed 's/^ *//'` ; fi
if test -d $TST_DIR ; then
  echo "start from TST_DIR='$TST_DIR' at: "`date`
else
 #if test ! -d $TST_DIR ; then mkdir $TST_DIR ; fi
 #if test ! -d $TST_DIR ; then
 #  echo "ERROR: Can't create directory \"$TST_DIR\""
 #  exit 1
 #fi
 #echo "start in new dir TST_DIR='$TST_DIR' at: "`date`
  echo "ERROR: missing directory \"$TST_DIR\""
  exit 1
fi
cd $TST_DIR
pwd
df .

NSLOTS=$SLURM_NTASKS
THEDATE=`date`
echo '********************************************************************************'
echo 'Start job '$THEDATE
echo 'NSLOTS = '$NSLOTS
echo '======= NODELIST ==============================================================='
echo $SLURM_NODELIST
cat /etc/redhat-release
echo '======= env ===================================================================='
env | grep SLURM
echo '======= modules ================================================================'
module list 2>&1
echo '================================================================================'

#- check for disk space: relative space (99%) or absolute (10.G):
dsp=`df -P . | tail -1 | awk '{print $5}' | sed 's/%$//'`
if [ $dsp -gt 99 ] ; then
#dsp=`df -P . | tail -1 | awk '{print $4}'`
#if [ $dsp -le 100000000 ] ; then
  echo 'Not enough space on this disk => do not run testreport.'
  df .
  exit
fi
if [ $checkOut -eq 1 ] ; then
  if test ! -e $gcmDIR/.git/config ; then
    echo "no file: $gcmDIR/.git/config => try to download a fresh clone"
    checkOut=2
  fi
  if test "x$addExp" != x ; then
    if test ! -e $gcmDIR/$git_other/.git/config ; then
      echo "no file: $gcmDIR/$git_other/.git/config => try a fresh clone"
      checkOut=2
    fi
  fi
fi
if [ $checkOut -eq 1 ] ; then
    echo "cleaning output from $gcmDIR/verification @ "`date +"%H:%M:%S"`" :"
#- remove previous output tar files and tar & remove previous output-dir
    /bin/rm -f $gcmDIR/verification/??_${dNam}-${sfx}_????????_?.tar.gz
    ( cd $gcmDIR/verification
      listD=`ls -1 -d ??_${dNam}-${sfx}_????????_? 2> /dev/null`
      for dd in $listD
      do
        if test -d $dd ; then
          tar -cf ${dd}".tar" $dd > /dev/null 2>&1 && gzip ${dd}".tar" && /bin/rm -rf $dd
          retVal=$?
          if test "x$retVal" != x0 ; then
             echo "ERROR in tar+gzip prev outp-dir: $dd"
             echo " on '"`hostname`"' (return val=$retVal) but continue"
          fi
        fi
      done )
    echo "clean testreport output"
  # ( cd $gcmDIR/verification ; $RS_Script -clean )
    ( cd $gcmDIR/verification ; $TR_Script $typ -clean )
    if test "x$addExp" != x ; then
      ( cd $gcmDIR/verification
        listD=`ls -o | grep '^l' | awk '{print $8}' 2> /dev/null`
        echo " + remove local links: $listD"
        /bin/rm -f $listD
      )
    fi
    echo "Update $git_code code in dir $gcmDIR @ "`date +"%H:%M:%S"`" :"
    ( cd $gcmDIR ; git pull ) 2>&1
    retVal=$?
    if test "x$retVal" != x0 ; then
       echo "git pull on '"`hostname`"' fail (return val=$retVal) => exit"
       exit
    fi
    echo "  and checkout master @ "`date +"%H:%M:%S"`" :"
    ( cd $gcmDIR ; git checkout master -- . ) 2>&1
  if test "x$addExp" != x ; then
    echo "Update $git_other code in dir $gcmDIR/$git_other @ "`date +"%H:%M:%S"`" :"
    ( cd $gcmDIR/$git_other ; git pull ) 2>&1
    retVal=$?
    if test "x$retVal" != x0 ; then
       echo "git pull on '"`hostname`"' fail (return val=$retVal) => exit"
       exit
    fi
    echo "  and checkout master @ "`date +"%H:%M:%S"`" :"
    ( cd $gcmDIR/$git_other ; git checkout master -- . ) 2>&1
  fi
fi

if [ $checkOut -eq 2 ] ; then
  if test -e $gcmDIR ; then
    echo -n "Removing working copy: $gcmDIR ..."
    rm -rf $gcmDIR
    echo "  done"
  fi
  echo "Make a clone of $git_code from repo: $git_repo ..."
  git clone $git_repo/${git_code}.git $gcmDIR 2> $tmpFil
  retVal=$?
  if test $retVal = 0 ; then
      echo '  done' ; rm -f $tmpFil
  else
      echo " Error: 'git clone' returned: $retVal"
      cat $tmpFil ; rm -f $tmpFil
      exit
  fi
  if test "x$addExp" != x ; then
    echo "Make a clone of $git_other from repo: $git_repo ..."
    ( cd $gcmDIR ; git clone $git_repo/${git_other}.git 2> $tmpFil )
    retVal=$?
    if test $retVal = 0 ; then
      echo '  done' ; rm -f $tmpFil
    else
      echo " Error: 'git clone' returned: $retVal"
      cat $tmpFil ; rm -f $tmpFil
      exit
    fi
  fi
  if test -d $gcmDIR/verification ; then
    /usr/bin/find $gcmDIR -type d | xargs chmod g+rxs
    /usr/bin/find $gcmDIR -type f | xargs chmod g+r
  fi
fi

#- change dir to $gcmDIR/verification + add link for additional experiments:
if test -e $gcmDIR/verification ; then
  if [ $checkOut -lt 2 ] ; then
    echo " dir $gcmDIR/verification exist" ; fi
  cd $gcmDIR/verification
  for exp2add in $addExp ; do
    test -r $exp2add && /bin/rm -rf $exp2add
    if test -d  ../$git_other/$exp2add ; then
      echo "  add $exp2add link from $git_other"
      ln -s ../$git_other/$exp2add .
    else
      echo "  missing dir: $git_other/$exp2add"
      continue
    fi
  done
else
  echo "no dir: $gcmDIR/verification => exit"
  exit
fi

#-----------------------------------------------------------------------------------------
# create "mf_file" with list of nodes to use:
MPI_mFile="mpi_mfile.$$"
echo '' ; echo "Using machine-file MPI_mFile='$MPI_mFile' :"
 srun hostname | sort > $MPI_mFile
 cat $MPI_mFile
 echo " <-- end of MPI_mFile file"

if [ $dblTr -eq 1 ] ; then
  echo ''
#- 1) just compile ("-nr"), using "-j 2" to speed up
  echo $TR_Script $options -of $OPTFILE $optExp \'$fewExp\' \
    -j 2 -nr -odir ${dNam}-$sfx
  $TR_Script $options -of $OPTFILE $optExp "$fewExp" \
    -j 2 -nr -odir ${dNam}-$sfx
  nFc=`grep -c '^Y . N N ' tr_out.txt`
  echo " <= fail to compile $nFc experiments"
  options="$options -q"
fi

if [ $dblTr -ge 0 ] ; then
  echo ''
#- 2) run and report results ; also finish to compile those who failed with "-j"
  echo $TR_Script $options -of $OPTFILE $optExp \'$fewExp\' \
    -c \'mpirun -np TR_NPROC -hostfile TR_MFILE ./mitgcmuv_ad\' -mf $MPI_mFile \
    -odir ${dNam}-$sfx -send \'$SEND\' -sd $SavD -a jm_c@mitgcm.org
  $TR_Script $options -of $OPTFILE $optExp "$fewExp" \
    -c 'mpirun -np TR_NPROC -hostfile TR_MFILE ./mitgcmuv_ad' -mf $MPI_mFile \
    -odir ${dNam}-$sfx -send "$SEND" -sd $SavD -a jm_c@mitgcm.org
  retVal=$?
else retVal=0 ; fi

# exit 0
# logFile=${OUTP}/tut_tracer_adj.som.log
# echo -n "-- SLURM_TASKS_PER_NODE= $SLURM_TASKS_PER_NODE ; " >> $logFile
# date >> $logFile
# grep 'My Processor Name' tutorial_tracer_adjsens/run/STDOUT.000? \
#    | sed 's/tutorial_tracer_adjsens\//    /' >> $logFile
# grep 'My Processor Name' tutorial_tracer_adjsens/tr_run.som81/STDOUT.000? \
#    | sed 's/tutorial_tracer_adjsens\// /'    >> $logFile

if test "x$retVal" != x0 ; then
  echo "<== testreport returned retVal=${retVal}, expecting 0"
# echo " -> skip restart test 'do_tst_2+2'"
else
# echo ''
#- 3) test restart and report results
# echo $RS_Script -mpi \
#   -exe \'mpirun -np TR_NPROC -hostfile TR_MFILE ./mitgcmuv\' -mf $MPI_mFile \
#   -o ${dNam}-$sfx -send \'$SEND\' -sd $SavD -a jm_c@mitgcm.org
# $RS_Script -mpi \
#   -exe 'mpirun -np TR_NPROC -hostfile TR_MFILE ./mitgcmuv' -mf $MPI_mFile \
#   -o ${dNam}-$sfx -send "$SEND" -sd $SavD -a jm_c@mitgcm.org
#-----------------------------------------------------------------------------------------
  echo -n "Remove machine-file MPI_mFile :"
  rm -f $MPI_mFile
  echo " rm -f $MPI_mFile : done"
fi
