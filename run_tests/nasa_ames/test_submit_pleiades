#! /usr/bin/env bash

today=`date +%Y%m%d`
dInWeek=`date +%a`

#- select which part to do:
# cleanLog   # clean log files & saved backup (=0 : no cleaning ; =1 : remove old ones )
# updateSrc  # update MITgcm src code       (=0 : no update ; =1 : update ; =2 download from Git)
# updateTst  # update batch testing scripts (=0 : no update ; =1 : update ; =2 download from Git)
# submitJob  # submit batch jobs            (=0 : none ;      =1 : submit $TEST_LIST jobs)
# sfxTyp     # select sufix type of BATCH_SCRIPT to submit   # <== Disabled here

#-- process arguments:
TEST_LIST='unset' ; sfxTyp=''
if test $# = 0 ; then
  #- default: to do all of them
  cleanLog=1 ; updateSrc=1 ; updateTst=1 ; submitJob=1
else
  cleanLog=0 ; updateSrc=0 ; updateTst=0 ; submitJob=0
  while [ $# -ge 1 ] ; do
    case $1 in
      '-clnLog') cleanLog=1 ; shift ;;
      '-updSrc') updateSrc=1 ; shift ;;
      '-updTst') updateTst=1 ; shift ;;
      '-subJob') submitJob=1 ; shift ;;
#     'c6'|'c7') sfxTyp=".$1" ; submitJob=1 ; shift ;;
      *) if test $TEST_LIST = 'unset' ; then TEST_LIST=$1
         else TEST_LIST="$TEST_LIST $1" ; fi ; shift ;;
    esac
  done
fi
#- default is to submit all of the bacth-scripts:
if test $submitJob = 1 -a $TEST_LIST = 'unset' ; then
 #TEST_LIST='ieee fast'
  TEST_LIST='ieee fast1 fast2'
fi

#-- Setting internal variables/parameters:

thisFile=`basename $0`
headNode=`hostname -s`
#dNam=$headNode
dNam='pleiades'
HERE="$HOME/test_${dNam}"
TST_DISK="/nobackupp17/$USER"
TST_DIR="$TST_DISK/test_${dNam}"
logPfix='test_submit'

#- Batch related setting
 QSUB="/PBS/bin/qsub"
 QLIST="/PBS/bin/qstat -u $USER"
#QSUB="/usr/bin/sbatch"
#QLIST="/usr/bin/squeue -u $USER"
#- and batch scripts:
 scrDirNam="run_tests/nasa_ames"
 SUB_DIR="$HERE/$dNam"
 OUT_DIR="$HERE/output"
 LOG_FIL="$OUT_DIR/$logPfix."`date +%m%d`".log"
#SUB_DIR="$HERE/temp"

#- where local copy of code is (need to be consistent with run-job scripts):
 srcDIR=$TST_DIR
#srcDIR=$HERE
 srcCode="MITgcm_today"
 updFile='updated_code'

 tmpFil="/tmp/$thisFile.$$"
#-- to get the updated MITgcm code from the day
#- which GitHub repository to use and how to access it:
  git_repo='MITgcm';  git_code='MITgcm' ; git_other='verification_other'
 #git_repo='altMITgcm'; #git_code='MITgcm66h'
#-- to get the updated testing scripts (with same "git_repo"):
  git_test='regression_tests'
#--
  git_repo="https://github.com/$git_repo"
 #git_repo="git://github.com/$git_repo"
 #git_repo="git@github.com:$git_repo"

#-------------------------------------------------------------
#-- create a log file:
dd=$OUT_DIR
if test ! -d $dd ; then
  # if test -e $dd ; then /bin/rm -rf $dd ; fi
  echo " create dir '$dd/' for output files:"
  mkdir $dd
  retVal=$?
  if test $retVal != 0 ; then
    echo " Error: 'mkdir $dd' returned: $retVal"
    exit 1
  fi
fi
cd $OUT_DIR

rm -f $logPfix.*.log_bak
if test -f $LOG_FIL ; then mv -f $LOG_FIL ${LOG_FIL}_bak ; fi
echo -n '-- Starting: '					| tee -a $LOG_FIL
date							| tee -a $LOG_FIL
echo -n " cleanLog='$cleanLog' ; updateSrc='$updateSrc' ;"	| tee -a $LOG_FIL
echo -n " updateTst='$updateTst' ; submitJob='$submitJob' ;"	| tee -a $LOG_FIL
echo    " TEST_LIST='$TEST_LIST' ; sfxTyp='$sfxTyp'"		| tee -a $LOG_FIL

dd=prev
if test ! -d $dd ; then
  # if test -e $dd ; then /bin/rm -rf $dd ; fi
  echo " create dir '$dd/' for previous output files:"	| tee -a $LOG_FIL
  mkdir $dd
  retVal=$?
  if test $retVal != 0 ; then
    echo " Error: 'mkdir $dd' returned: $retVal"
    exit 9
  fi
fi

if [ $cleanLog -ge 1 ] ; then
#-  clean up old log files:
  n=$(( `ls $logPfix.*.log | wc -l` - 10 ))
  if test $n -gt 0 ; then
    echo ' remove old log files:'			| tee -a $LOG_FIL
      ls -lt $logPfix.*.log | tail -"$n"		| tee -a $LOG_FIL
      ls -t  $logPfix.*.log | tail -"$n" | xargs rm -f
  fi
fi

#-------------------------------------------------------------
#-- additional Env.Var. settings

#export PATH="$PATH:/usr/local/bin"
if [ -d ~/bin ]; then export PATH=$PATH:~/bin ; fi
#- to get case insensitive "ls" (and order of tested experiments)
export LC_ALL="en_US.UTF-8"

if test -f /etc/profile.d/modules.sh    ; then . /etc/profile.d/modules.sh    ; fi
#- load standard modules:
#module add fedora slurm maui svante
#module add slurm
module list 						>> $LOG_FIL 2>&1

#---+----1----+----2----+----3----+----4----+----5----+----6----+----7-|--+----|

if [ $updateTst -ge 1 ] ; then
  cd $HERE
#-- Download/Update batch testing scripts:
  if [ $updateTst -eq 1 ] ; then
    if test ! -e $git_test/.git/config ; then
      echo "no file: $git_test/.git/config => try a new clone"	| tee -a $LOG_FIL
      updateTst=2
    fi
  fi
  #--
  if [ $updateTst -eq 2 ] ; then
    if test -e $git_test ; then
      echo -n " removing dir: $git_test ..."			| tee -a $LOG_FIL
      /bin/rm -rf $git_test
      echo "  done"						| tee -a $LOG_FIL
    fi
    echo -n "Make a clone of $git_test from repo: $git_repo ... " | tee -a $LOG_FIL
    git clone $git_repo/${git_test}.git 2> $tmpFil
    retVal=$?
    if test $retVal = 0 ; then
      echo ' --> done!'						| tee -a $LOG_FIL
      rm -f $tmpFil
    else echo ''						| tee -a $LOG_FIL
      echo " Error: 'git clone' returned: $retVal"		| tee -a $LOG_FIL
      cat $tmpFil ; rm -f $tmpFil
      exit 2
    fi
  fi
  #--
  if [ $updateTst -eq 1 ] ; then
    echo -n "Updating current clone ( $git_test ) ..."		| tee -a $LOG_FIL
    echo '' >> $LOG_FIL
    ( cd $git_test; git pull )					>> $LOG_FIL 2>&1
    retVal=$?
    if test $retVal = 0 ; then
      echo "  done"						| tee -a $LOG_FIL
    else
      echo "'git pull' on '"`hostname`"' fail (return val=$retVal) => exit" | tee -a $LOG_FIL
      exit 3
    fi
    ( cd $git_test ; git checkout master ; git checkout -- . )	| tee -a $LOG_FIL
  fi
  #-- symbolic-link as short-cut
  if test ! -e $dNam ; then
    if test -d $git_test/$scrDirNam ; then
      echo "  link '$git_test/$scrDirNam' to '$dNam'"		| tee -a $LOG_FIL
      ln -s $git_test/$scrDirNam $dNam
    fi
  fi
fi #-- Done with Download/Update of testing scripts

#---+----1----+----2----+----3----+----4----+----5----+----6----+----7-|--+----|

if [ $updateSrc -ge 1 ] ; then
#-- Download/Update reference version of MITgcm code:

  if test $srcDIR = $TST_DIR ; then
    echo "cd $TST_DISK ; pwd (x2)" | tee -a $LOG_FIL
    cd $TST_DISK	| tee -a $LOG_FIL 2>&1
    pwd			| tee -a $LOG_FIL
  fi
  if test ! -d $srcDIR ; then
     echo -n "Creating a working dir: $srcDIR ..."	| tee -a $LOG_FIL
    #/bin/rm -rf $srcDIR
     mkdir $srcDIR
     retVal=$?
     if test "x$retVal" != x0 ; then
       echo "Error: unable to make dir: $srcDIR (err=$retVal ) --> Exit" | tee -a $LOG_FIL
       exit 4
     fi
  fi
  cd $srcDIR
  pwd		| tee -a $LOG_FIL

  #- remove date/lock-file and old copy:
  if test -f $updFile ; then rm -f $updFile ; sleep 2 ; fi
  test -e $srcCode && rm -rf $srcCode

  if [ $updateSrc -eq 1 ] ; then
    if test ! -e $git_code/.git/config ; then
      echo "no file: $git_code/.git/config => try a new clone"	| tee -a $LOG_FIL
      updateSrc=2
    fi
  fi
  if [ $updateSrc -eq 2 ] ; then
    if test -e $git_code ; then
       echo -n " removing dir: $git_code ..."		| tee -a $LOG_FIL
       rm -rf $git_code
       echo "  done"					| tee -a $LOG_FIL
    fi
    echo -n "Make a clone of $git_code from repo: $git_repo ..."	| tee -a $LOG_FIL
    git clone $git_repo/${git_code}.git 2> $tmpFil
    retVal=$?
    if test $retVal = 0 ; then
       echo ' --> done!'				| tee -a $LOG_FIL
       rm -f $tmpFil
    else echo ''					| tee -a $LOG_FIL
       echo " Error: 'git clone' returned: $retVal"	| tee -a $LOG_FIL
       cat $tmpFil ; rm -f $tmpFil
       exit 5
    fi
  fi
  #--
  if [ $updateSrc -eq 1 ] ; then
    echo -n "Updating current clone ( $git_code ) ..."	| tee -a $LOG_FIL
    echo '' >> $LOG_FIL
    ( cd $git_code ; git pull )				>> $LOG_FIL 2>&1
    retVal=$?
    if test "x$retVal" != x0 ; then echo ''
       echo "'git pull' on '"`hostname`"' fail (return val=$retVal) => exit" | tee -a $LOG_FIL
       exit 7
    else echo "  done"					| tee -a $LOG_FIL
    fi
    echo "  and checkout master:"			| tee -a $LOG_FIL
    ( cd $git_code ; git checkout master ; git checkout -- . )		| tee -a $LOG_FIL
  fi
  #---- making a new working copy: MITgcm_today
  rsync -a $git_code/ $srcCode --exclude '.git'
  ls -ld $srcCode					| tee -a $LOG_FIL
  /usr/bin/find $srcCode -type d | xargs chmod g+rxs
  /usr/bin/find $srcCode -type f | xargs chmod g+r
  #- update date/lock-file:
  if test -d $srcCode/verification ; then
    echo $today > $updFile ; sleep 2
    ls -l $updFile					| tee -a $LOG_FIL
    echo ''						| tee -a $LOG_FIL
  fi

fi #-- Done with Download/Update of MITgcm code

#---+----1----+----2----+----3----+----4----+----5----+----6----+----7-|--+----|

if [ $submitJob -ge 1 ] ; then
#-- Submit batch test-scripts jobs : leave srcDIR and go back to output dir
  cd $OUT_DIR
  #-- start job submission process

  JOB_LIST=$TEST_LIST
  NB_SUB_JOBS=0
  for i in $JOB_LIST
  do
    sfx=$i
    #sfx=`echo ${i} | sed 's/^.../&_/' | tr '[:upper:]' '[:lower:]'`
    BATCH_SCRIPT="test_${dNam}_$sfx"
    if test -f $SUB_DIR/$BATCH_SCRIPT ; then
      #- job name ( $JOB ) & output-file name ( $JOB.std??? ) must match
      #  definition within $BATCH_SCRIPT slurm script
      JOB="tst_${i}" ; sJob=$JOB
      #sJob=`printf "%8.8s" $JOB` #- squeue truncate name to only 1rst 8c
      job_exist=`$QLIST | grep $sJob | wc -l`
      if test "x_$job_exist" = x_0 ; then
        #-- move previous output file
        outList=`ls $JOB.std??? 2> /dev/null`
        if test "x$outList" != x ; then
          echo -n " moving job '$JOB' old output files:"| tee -a $LOG_FIL
          if test -d $OUT_DIR/prev ; then
            for xx in $outList ; do
              pp=$OUT_DIR/prev/$xx ; echo -n " $xx"	| tee -a $LOG_FIL
              test -f $pp.sav && mv -f $pp.sav $pp.old
              test -f $pp     && mv -f $pp     $pp.sav
              chmod a+r $xx ; mv -f $xx $OUT_DIR/prev
            done
            echo " to dir ./prev"			| tee -a $LOG_FIL
          else
            echo " <-- missing dir $OUT_DIR/prev"	| tee -a $LOG_FIL
          fi
        else echo " no old output files from job '$JOB'"| tee -a $LOG_FIL
        fi
        #-- submit job
        if test $sfx != 'fast2' ; then
          echo -n "--> $JOB : $BATCH_SCRIPT , "		| tee -a $LOG_FIL
          # $QSUB $SUB_DIR/$BATCH_SCRIPT 2>&1		| tee -a $LOG_FIL
          ( $QSUB $SUB_DIR/$BATCH_SCRIPT 2>&1 ; retVal=$?
            #echo "[dBug 1 --> retVal= $retVal <-- dBug]"
            if test "x$retVal" != x0 ; then
              echo "Error: $QSUB failed to submit job $JOB (retVal: $retVal )"
            fi
          )						| tee -a $LOG_FIL
          retVal=`tail -n 1 $LOG_FIL | grep -c '^Error'`
          #echo "[dBug 2 --> retVal= $retVal <-- dBug]"	| tee -a $LOG_FIL
          if test "x$retVal" = x0 ; then
            NB_SUB_JOBS=`expr $NB_SUB_JOBS + 1`
          fi
        fi
      else
          echo "--> $JOB :"				| tee -a $LOG_FIL
          $QLIST | grep $sJob				| tee -a $LOG_FIL
          echo ' job already exist => skip this test'	| tee -a $LOG_FIL
      fi
    else
       echo 'no file:' $BATCH_SCRIPT 'to submit'	| tee -a $LOG_FIL
    fi
  done
  echo "Submitted $NB_SUB_JOBS jobs from dir: $SUB_DIR"	| tee -a $LOG_FIL

fi #-- Done with submitting jobs

#---+----1----+----2----+----3----+----4----+----5----+----6----+----7-|--+----|

echo -n '-- Finished at: '				| tee -a $LOG_FIL
date							| tee -a $LOG_FIL
exit 0
